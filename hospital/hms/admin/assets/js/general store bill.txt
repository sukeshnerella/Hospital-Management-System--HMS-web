CN LAB
1-commands:
  a) nslookup   
                   >google.com
                   >facebook.com
b)netstat
                netstat  -s
                netstat  -r
c)ping
                ping google.com
                ping facebook.com
d)traceroute
                traceroute  google.com
                traceroute facebook.com
e)ifconfig
f)arp
               arp  -a
               arp  -n

2,3-connections:
•	GO TO HOME
•	SELECT VAR DIRECTORY
•	SELECT WWW
•	SELECT HTML
•	CREATE A NEW FILE
•	OPEN CHROME,TYPE YOUR IP ADDRESS/YOUR FILE NAME(EG:192.168.50.42/FILE.TXT)
•	YOU WILL GET THE FILE
TO KNOW YOUR SYSTEM’S IP ADDRESS:
OPEN TERMINAL
TYPE: “hostname -I”
4a-TCP CONNECTION

SERVER:

import socket

HOST = “127.0.0.1”
PORT = 65432  

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.bind((HOST, PORT))
    s.listen()
    conn, addr = s.accept()
    with conn:
        print(f"Connected by {addr}")
        while True:
            data = conn.recv(1024)
            if not data:
                break
            conn.sendall(data)

CLIENT:

import socket

HOST = "127.0.0.1"   
PORT = 65432   

with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((HOST, PORT))
    s.sendall(b"Hello, world")
    data = s.recv(1024)

print(f"Received {data!r}")

4b-CHATTING

SERVER:

import socket


def server_program():
    host = socket.gethostname()
    port = 5000  
    server_socket = socket.socket()  
    server_socket.bind((host, port))  
    server_socket.listen(2)
    conn, address = server_socket.accept()  
    print("Connection from: " + str(address))
    while True:
        data = conn.recv(1024).decode()
        if not data:
            break
        print("from connected user: " + str(data))
        data = input(' -> ')
        conn.send(data.encode())  

    conn.close()  

if __name__ == '__main__':
    server_program()

CLIENT:

import socket


def client_program():
    host = socket.gethostname()  
    port = 5000   

    client_socket = socket.socket()  
    client_socket.connect((host, port))   

    message = input(" -> ")   

    while message.lower().strip() != 'bye':
        client_socket.send(message.encode())  
        data = client_socket.recv(1024).decode()  

        print('Received from server: ' + data)   

        message = input(" -> ")   

    client_socket.close()  

if __name__ == '__main__':
    client_program()


4c-FILE TRANSFER

SERVER:

import socket
 
IP = socket.gethostbyname(socket.gethostname())
PORT = 4455
ADDR = (IP, PORT)
SIZE = 1024
FORMAT = "utf-8"
 
def main():
    print("[STARTING] Server is starting.")
       server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 
    server.bind(ADDR)
 
    server.listen()
    print("[LISTENING] Server is listening.")
 
    while True:
               conn, addr = server.accept()
        print(f"[NEW CONNECTION] {addr} connected.")
 
        filename = conn.recv(SIZE).decode(FORMAT)
        print(f"[RECV] Receiving the filename.")
        file = open(filename, "w")
        conn.send("Filename received.".encode(FORMAT))
 
        data = conn.recv(SIZE).decode(FORMAT)
        print(f"[RECV] Receiving the file data.")
        file.write(data)
        conn.send("File data received".encode(FORMAT))
 
        file.close()

        conn.close()
        print(f"[DISCONNECTED] {addr} disconnected.")
 
if __name__ == "__main__":
    main()


CLIENT:

import socket
 
IP = socket.gethostbyname(socket.gethostname())
PORT = 4455
ADDR = (IP, PORT)
FORMAT = "utf-8"
SIZE = 1024
 
def main():

    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 
   
    client.connect(ADDR)
 
       file = open("send.txt", "r")
    data = file.read()
 
 
    client.send("yt.txt".encode(FORMAT))
    msg = client.recv(SIZE).decode(FORMAT)
    print(f"[SERVER]: {msg}")
     client.send(data.encode(FORMAT))
    msg = client.recv(SIZE).decode(FORMAT)
    print(f"[SERVER]: {msg}")
     file.close()
 

    client.close()
 
 
if __name__ == "__main__":
    main()


5-DNS-IP TO HOSTNAME

SERVER:

import socket
s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
dns_table={"192.165.1.1":"www.google.com",
          "192.165.1.2":"www.facebook.com",
           "192.165.1.2":"www.gmail.com",
           "192.165.1.2":"www.youtube.com",
          }
print('Starting......')
s.bind(('localhost',9999))
while True:
    data,addr=s.recvfrom(1024)
    print(f'{addr} wants to fetch data!')
    data=data.decode()
    ip=dns_table.get(data,"Not found!").encode()
    send=s.sendto(ip,addr)

CLIENT:

import socket
s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
c='Y'
while c.upper()=='Y':
    rd=input('Enter the ip address for which the domain is needed:')
    send=s.sendto(rd.encode(),('localhost',9999))
    data,address=s.recvfrom(1024)
    replydomain=data.decode().strip()
    print(f'The domain for the ip address.....{rd}:{replydomain}')
    c=input('continue?(y/n)')
s.close()

5B-DNS-HOSTNAME TO  IP

SERVER:

#server sending the ip address for the given domain name.
import socket
s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
dns_table={"www.google.com":"192.165.1.1",
           "www.facebook.com":"192.165.1.2",
           "www.gmail.com":"192.165.1.3",
           "www.youtube.com":"192.165.1.4",
          }
print('Starting......')
s.bind(('localhost',9999))
while True:
    data,addr=s.recvfrom(1024)
    print(f'{addr} wants to fetch data!')
    data=data.decode()
    ip=dns_table.get(data,"Not found!").encode()
    send=s.sendto(ip,addr)



CLIENT:

import socket
s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)

while c.upper()=='Y':
    rd=input('Enter the domain for which the ip is needed:')
    send=s.sendto(rd.decode(),('localhost',9999))
    data,address=s.recvfrom(1024)
    replyip=data.decode().strip()
    print(f'The ip for the domain name{rd}:{replyip}')
    c=input('continue?(y/n)')
s.close()




6-STOP AND WAIT PROTOCOL

SERVER:

import socket
from threading import *

serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host = "localhost"
port = 8000

serversocket.bind((host, port))

class client(Thread):
    def __init__(self, socket, address):
        Thread.__init__(self)
        self.sock = socket
        self.addr = address
        self.start()

    def run(self):
        while 1:
            r=input("Send data -->")
            clientsocket.send(r.encode())
            print(clientsocket.recv(1024).decode())
           

serversocket.listen(5)
print ('Sender ready and is listening')
while (True):

   
    clientsocket, address = serversocket.accept()
    print("Receiver "+str(address)+" connected")
       client(clientsocket, address)


CLIENT:

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host ="localhost"
port =8000
s.connect((host,port))



while 2:
   data=s.recv(1024).decode()
   print("Received --> "+data)
   str="Acknowledgement: Message Received"
   s.send(str.encode())

s.close ()

7)Implementation of selective repeat ARQ flow control mechanism between the end systems through
socket programming.
Server:

import socket
import random
s=socket.socket()
host=socket.gethostname()
ip=socket.gethostbyname(host)
port=1348
s.bind((host,port))
s.listen(5)
conn,addr=s.accept()
print("connection established ",addr)
k=int(input("Enter number of frames to be sent:"))
sender=[]
window=[]
n=int(input("Enter window size"))
for i in range(k):
    sender.append(i)
print("Frames to send are:")
for i in sender:
    print("Frame->",i)
i=0
for _ in range(n):
    window=sender[i:i+5]
    for message in window:
        conn.send(str(message).encode())
        reply=conn.recv(1024).decode()
        if(reply=="ack"):
             print("Acknowledgement recieved")
        else:
             print("negative acknowledgement recieved resending the packets again")
             window=sender[i:i+5]
    i=i+5

Client:

import socket
s=socket.socket()
host=socket.gethostname()
port=1348
s.connect((host,port))
recieved=[]
print("Connected to server")
i=0
while 12:
     message=s.recv(1024).decode()
     recieved.append(message)
     reply=input("client:")
     s.send(reply.encode())
     print("Acknowlegement sent")
     print("recieved frame:",message)
     i=i+1
     if(i==12):
         break


8)Dijkstas:
class Graph():
	def __init__(self, vertices):
		self.V = vertices
		self.graph = [[0 for column in range(vertices)]
					for row in range(vertices)]
	def printSolution(self, dist):
		print("Vertex \t Distance from Source")
		for node in range(self.V):
			print(node, "\t\t", dist[node])
	def minDistance(self, dist, sptSet):
		min = 1e7
		for v in range(self.V):
			if dist[v] < min and sptSet[v] == False:
				min = dist[v]
				min_index = v
		return min_index
	def dijkstra(self, src):
		dist = [1e7] * self.V
		dist[src] = 0
		sptSet = [False] * self.V
		for cout in range(self.V):
			u = self.minDistance(dist, sptSet)
			sptSet[u] = True
			for v in range(self.V):
				if (self.graph[u][v] > 0 and
				sptSet[v] == False and
				dist[v] > dist[u] + self.graph[u][v]):
					dist[v] = dist[u] + self.graph[u][v]
		self.printSolution(dist)
g = Graph(5)
g.graph = [[0, 4, 0, 8, 0],
		[4, 0, 8, 11, 0],
		[0, 8, 0, 7, 2],
		[0, 0, 7, 0, 9],
		[0, 0, 0, 9, 0]
		]
g.dijkstra(0)

9)cyclic redundancy check:

#include <stdio.h>
 #include <string.h>
 void main() {
	int i,j,keylen,msglen;
	char input[100], key[30],temp[30],quot[100],rem[30],key1[30];
	printf("Enter Data: ");
	gets(input);
	printf("Enter Key: ");
	gets(key);
	keylen=strlen(key);
	msglen=strlen(input);
	strcpy(key1,key);
	for (i=0;i<keylen-1;i++) {
		input[msglen+i]='0';
	}
	for (i=0;i<keylen;i++)
	 temp[i]=input[i];
	for (i=0;i<msglen;i++) {
		quot[i]=temp[0];
		if(quot[i]=='0')
		 for (j=0;j<keylen;j++)
		 key[j]='0'; else
		 for (j=0;j<keylen;j++)
		 key[j]=key1[j];
		for (j=keylen-1;j>0;j--) {
			if(temp[j]==key[j])
			 rem[j-1]='0'; else
			 rem[j-1]='1';
		}
		rem[keylen-1]=input[i+keylen];
		strcpy(temp,rem);
	}
	strcpy(rem,temp);
	printf("\nQuotient is ");
	for (i=0;i<msglen;i++)
	 printf("%c",quot[i]);
	printf("\nRemainder is ");
	for (i=0;i<keylen-1;i++)
	 printf("%c",rem[i]);
	printf("\nFinal data is: ");
	for (i=0;i<msglen;i++)
	 printf("%c",input[i]);
	for (i=0;i<keylen-1;i++)
	 printf("%c",rem[i]);
}	

9b)checksum:

#include<stdio.h>
#include<string.h>
int main()
{
char a[20],b[20];
char sum [20], complement [20];
int i, length;
printf("Enter first binary string\n"); 
scanf("%s",&a); 
printf("Enter second binary string\n"); 
scanf("%s", &b);
if(strlen(a) == strlen(b))
{
length = strlen(a); 
char carry='0';
for(i=length-1;i>=0; i--)
{
if(a[i]=='0' && b[i]=='0' && carry== '0')
{
sum[i]='0'; 
carry='0';
}
else if(a[i]=='0' && b[i]=='0' && carry=='1')
{
sum[i]='1'; carry='0';
}
else if(a[i]=='0' && b[i]=='1' && carry== '0')
{
sum[i]='1'; carry='0';
} 
else if(a[i]=='0' && b[i]=='1' && carry=='1')
{
sum[i]='0'; carry='1';
} 
else if(a[i]=='1' && b[i]=='0' && carry== '0')
{
sum[i]='1'; carry='0';
} 
else if(a[i]=='1' && b[i]=='0' && carry=='1')
{
sum[i]='0'; carry='1';
} 
else if(a[i]=='1' && b[i]=='1' && carry== '0') {
sum[i]='0'; carry='1';
}
else if(a[i]=='1' && b[i]=='1' && carry=='1')
{
sum[i]='1';
sum[1]='1'; carry='1';
} 
else
break;
}
printf("\nSum=%c%s", carry,sum);
for (i=0;i<length;i++)
{
if(sum[i]=='0') 
complement[i]='1';
else 
complement[i]='0';
}
if(carry=='1') 
carry='0';
else
carry='1';
printf("\nChecksum=%c%s", carry, complement);
} 
else 
{
printf("\nWrong input strings");
}
}
